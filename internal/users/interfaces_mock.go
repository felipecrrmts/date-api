// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package users is a generated GoMock package.
package users

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(ctx context.Context, user *User) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), ctx, user)
}

// Discover mocks base method.
func (m *MockStore) Discover(ctx context.Context, ID, minAge, maxAge int32, gender string, IDs []int32, location *Location, rank *Rank) ([]*Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Discover", ctx, ID, minAge, maxAge, gender, IDs, location, rank)
	ret0, _ := ret[0].([]*Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Discover indicates an expected call of Discover.
func (mr *MockStoreMockRecorder) Discover(ctx, ID, minAge, maxAge, gender, IDs, location, rank interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Discover", reflect.TypeOf((*MockStore)(nil).Discover), ctx, ID, minAge, maxAge, gender, IDs, location, rank)
}

// GetRankByIDs mocks base method.
func (m *MockStore) GetRankByIDs(ctx context.Context, IDs []int32) (*Rank, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRankByIDs", ctx, IDs)
	ret0, _ := ret[0].(*Rank)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRankByIDs indicates an expected call of GetRankByIDs.
func (mr *MockStoreMockRecorder) GetRankByIDs(ctx, IDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRankByIDs", reflect.TypeOf((*MockStore)(nil).GetRankByIDs), ctx, IDs)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(ctx context.Context, ID int32) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, ID)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), ctx, ID)
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(ctx context.Context, email string) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), ctx, email)
}

// Match mocks base method.
func (m *MockStore) Match(ctx context.Context, ID, swipedID int32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Match", ctx, ID, swipedID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Match indicates an expected call of Match.
func (mr *MockStoreMockRecorder) Match(ctx, ID, swipedID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockStore)(nil).Match), ctx, ID, swipedID)
}

// Swipe mocks base method.
func (m *MockStore) Swipe(ctx context.Context, ID int32, swipe *Swipe) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Swipe", ctx, ID, swipe)
	ret0, _ := ret[0].(error)
	return ret0
}

// Swipe indicates an expected call of Swipe.
func (mr *MockStoreMockRecorder) Swipe(ctx, ID, swipe interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Swipe", reflect.TypeOf((*MockStore)(nil).Swipe), ctx, ID, swipe)
}
